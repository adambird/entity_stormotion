store.user_store do
result = db.executeQuery "SELECT * FROM entities"
while result.next do
p result.intForColumn('id')
end
end
end
store.use_store do
end
store.user_store do |db|
result = db.executeQuery("SELECT * FROM entities")
while result.next do
p result.intForColumn('id')
end
end
end
store.use_store do |db|
result = db.executeQuery("SELECT * FROM entities")
result.next
p result.intForColumn('id')
end
store.init
store.use_store do |db|
result = db.executeQuery("SELECT * FROM entities")
result.next
p result.intForColumn('id')
end
exit
store = SqliteEntityStore.new
store.init
db = store.store
db.open
result = db.executeQuery("SELECT name FROM sqlite_master WHERE type='table' AND name ='entities'")
result.next
result.stringForColumn('name')
result = db.executeQuery("SELECT * FROM entities")
result.next
exit
store = SqliteEntityStore.new
store.db.open
store.db.executeUpdate("DROP TABLE entities")
store.db.close
exit
store = SqliteEntityStore.new
store.db.open
result = store.db.executeQuery('PRAGMA table_info(table_name);')
result.next
result = store.db.executeQuery('PRAGMA table_info('entities');')
result = store.db.executeQuery("PRAGMA table_info('entities');")
result.next
store.db.close
exit
entity = DummyEntity.new
exiy
exit
event = NameChanged.new(name: "sdfs")
event.attributes
event.public_methods
event.attribute_value(:name)
event.name
event.public_methods.select { |m| m =~ /\w\=$/ }
event.public_methods[3]
event.public_methods[2]
event.public_methods[2].to_s
event.public_methods.collect { |m| m.gsub(':') }.select { |m| m =~ /\w\=$/ }
event.public_methods.collect { |m| m.to_s.gsub(':') }.select { |m| m =~ /\w\=$/ }
event.public_methods.collect { |m| m.to_s.gsub(':', '') }.select { |m| m =~ /\w\=$/ }
exit
source = "{\"name\":\"skdfhskjf\",\"entity_id\":\"2234\",\"entity_version\":2}"
BW::JSON.parse(source)
exit